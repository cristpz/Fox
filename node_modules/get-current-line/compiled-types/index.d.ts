/** The combination of details about the line that was executing at the time */
export interface LineInfo {
	/** the line number that was executing at the time */
	line: number
	/** the method that was executing at the time */
	method: string
	/** the file that was executing at the time */
	file: string
}
/**
 * If provided, continue skipping until:
 *
 * 1. The file or method is found
 * 2. Once found, will continue until neither the file nor method are found anymore
 * 3. Once exited, the frame offset will then apply
 *
 * If you wish to capture the method or the file, combine them with `frames: -1`.
 *
 * If you wish for more customisation than this, create an issue requesting passing a custom skip handler function, as more variance to this interface is too much customisation complexity.
 */
export interface LineOffset {
	/**
	 * if provided, continue until a method containing or matching this string is exited
	 * if provided alongside a file, will continue until neither the file nor method are found
	 * this allows file and method to act as fallbacks for each other, such that if one is not found, it doesn't skip everything
	 */
	method?: RegExp | string | null
	/**
	 * if provided, continue until a file containing or matching this string is exited
	 * if provided alongside a method, will continue until neither the file nor method are found
	 * this allows file and method to act as fallbacks for each other, such that if one is not found, it doesn't skip everything
	 */
	file?: RegExp | string | null
	/**
	 * once we have satisfied the found condition, if any, then apply this index offset to the frames
	 * e.g. 1 would mean next frame, and -1 would mean the previous frame
	 * Use -1 to go back to the found method or file
	 */
	frames?: number
}
/**
 * Get the information about the line that called this method.
 * @param offset continue until these offset conditions are met, used to continue to the caller
 * @throws if a failure occured creating the line info
 * @example Input
 * ``` javascript
 * import getCurrentLine from 'get-current-line'
 * console.log(getCurrentLine())
 * ```
 * @example Result
 * ``` json
 * {
 * 	"line": "2",
 * 	"method": "Object.<anonymous>",
 * 	"file": "/Users/balupton/some-project/calling-file.js"
 * }
 * ```
 */
export default function getCurrentLine(offset?: LineOffset): LineInfo
//# sourceMappingURL=index.d.ts.map
